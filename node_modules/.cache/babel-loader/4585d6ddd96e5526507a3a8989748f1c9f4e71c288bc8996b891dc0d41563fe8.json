{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/GitHub/web-api/client/src/component/GoogleLogin.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from '../commons/axios';\nimport { baseURL } from '../commons/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchUserProfile(clientId) {\n  try {\n    const key = \"AIzaSyAx_gzyP_T3sdO5j2xEfozATQl653RHak4\";\n    const response = await axios.get(`https://people.googleapis.com/v1/people/${clientId}?personFields=emailAddresses,names,genders&key=${key}`);\n\n    // Extract the desired information from the response\n    const email = response.data.emailAddresses[0].value;\n    const gender = response.data.genders[0].value;\n    const name = response.data.names[0].displayName;\n    return {\n      email,\n      gender,\n      name\n    };\n  } catch (error) {\n    console.error('Failed to fetch user profile:', error);\n    throw error;\n  }\n}\nfunction GoogleLogin() {\n  _s();\n  async function handleCallbackResponse(response) {\n    // \"response\" includes user data and a unique user ID provided by Google\n\n    try {\n      // Fetch user's profile information from Google API\n      const userProfile = await fetchUserProfile(response.clientId);\n      // Extract the desired information from the user profile\n      const {\n        email,\n        gender,\n        name\n      } = userProfile;\n      const RegisFormData = {\n        fullName: name,\n        email: email,\n        password: 'No password number',\n        confirmPassword: 'No password number',\n        gender: gender\n        // Rest of the properties...\n      };\n\n      // Replace this URL with the URL of your own backend endpoint\n      // let RegisFormData = {};\n\n      let responseCheckUser;\n      try {\n        responseCheckUser = await axios.get(`${baseURL}/get-employees-accounts/${response.clientId}`);\n      } catch (error) {\n        console.log('User not found', error.message);\n      }\n      if (!responseCheckUser || !responseCheckUser.data) {\n        // Create a new user\n        RegisFormData = {\n          fullName: response.name,\n          email: response.email,\n          password: 'No password number',\n          confirmPassword: 'No password number',\n          gender: response.gender,\n          // If Google API provides it\n          phoneNumber: 'No phone number',\n          address: 'No address number',\n          state: \"verification\",\n          premission: \"Public User\",\n          department: \"No Department\",\n          employeeID: response.clientId,\n          hkID: 'No phone number'\n        };\n\n        // Register the new user\n        let registrationResponse = await registerUser(RegisFormData);\n\n        // Save the JWT to local storage\n        localStorage.setItem('auth-token', registrationResponse.data.token);\n        localStorage.setItem('premission', \"Public User\");\n      } else {\n        // The user already exists\n        let UserData = responseCheckUser.data;\n\n        // Save the JWT to local storage\n        localStorage.setItem('auth-token', UserData.token);\n        localStorage.setItem('premission', UserData.employee.premission);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  const registerUser = async RegisFormData => {\n    try {\n      const response = await axios.post(`${baseURL}/create-account`, {\n        // Include other registration data as needed\n        ...RegisFormData\n      });\n      console.log('Registration successful:', response.data);\n      alert('Registration successful!');\n      // Handle successful registration\n\n      // Set isRegistering back to false after the registration process is completed\n      // setIsRegistering(false);\n    } catch (error) {\n      console.error('Registration failed:', error.response.data);\n      alert('Registration failed!');\n      // Handle registration failure\n    }\n  };\n\n  // Init Google client\n  useEffect(() => {\n    /* global google */\n    google.accounts.id.initialize({\n      client_id: \"1061523075573-n537pria7u9k24et8osc54cop29krk3c.apps.googleusercontent.com\",\n      callback: handleCallbackResponse\n    });\n    google.accounts.id.renderButton(document.getElementById(\"signInDiv\"), {\n      theme: \"outline\",\n      size: \"large\"\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"signInDiv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(GoogleLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GoogleLogin;\nexport default GoogleLogin;\nvar _c;\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"names":["useEffect","axios","baseURL","jsxDEV","_jsxDEV","fetchUserProfile","clientId","key","response","get","email","data","emailAddresses","value","gender","genders","name","names","displayName","error","console","GoogleLogin","_s","handleCallbackResponse","userProfile","RegisFormData","fullName","password","confirmPassword","responseCheckUser","log","message","phoneNumber","address","state","premission","department","employeeID","hkID","registrationResponse","registerUser","localStorage","setItem","token","UserData","employee","err","post","alert","google","accounts","id","initialize","client_id","callback","renderButton","document","getElementById","theme","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/david/Documents/GitHub/web-api/client/src/component/GoogleLogin.js"],"sourcesContent":["import { useEffect } from 'react';\nimport axios from '../commons/axios';\nimport { baseURL } from '../commons/helper';\n\nasync function fetchUserProfile(clientId) {\n    try {\n        const key = \"AIzaSyAx_gzyP_T3sdO5j2xEfozATQl653RHak4\";\n        const response = await axios.get(`https://people.googleapis.com/v1/people/${clientId}?personFields=emailAddresses,names,genders&key=${key}`);\n\n        // Extract the desired information from the response\n        const email = response.data.emailAddresses[0].value;\n        const gender = response.data.genders[0].value;\n        const name = response.data.names[0].displayName;\n\n        return { email, gender, name };\n    } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        throw error;\n    }\n}\n\nfunction GoogleLogin() {\n\n    async function handleCallbackResponse(response) {\n        // \"response\" includes user data and a unique user ID provided by Google\n\n        try {\n            // Fetch user's profile information from Google API\n            const userProfile = await fetchUserProfile(response.clientId);\n            // Extract the desired information from the user profile\n            const { email, gender, name } = userProfile;\n            const RegisFormData = {\n                fullName: name,\n                email: email,\n                password: 'No password number',\n                confirmPassword: 'No password number',\n                gender: gender,\n                // Rest of the properties...\n            };\n\n\n\n\n\n            // Replace this URL with the URL of your own backend endpoint\n            // let RegisFormData = {};\n\n            let responseCheckUser;\n            try {\n                responseCheckUser = await axios.get(`${baseURL}/get-employees-accounts/${response.clientId}`);\n            } catch (error) {\n                console.log('User not found', error.message);\n            }\n\n\n            if (!responseCheckUser || !responseCheckUser.data) {\n                // Create a new user\n                RegisFormData = {\n                    fullName: response.name,\n                    email: response.email,\n                    password: 'No password number',\n                    confirmPassword: 'No password number',\n                    gender: response.gender, // If Google API provides it\n                    phoneNumber: 'No phone number',\n                    address: 'No address number',\n                    state: \"verification\",\n                    premission: \"Public User\",\n                    department: \"No Department\",\n                    employeeID: response.clientId,\n                    hkID: 'No phone number',\n                };\n\n                // Register the new user\n                let registrationResponse = await registerUser(RegisFormData);\n\n                // Save the JWT to local storage\n                localStorage.setItem('auth-token', registrationResponse.data.token);\n                localStorage.setItem('premission', \"Public User\");\n            } else {\n                // The user already exists\n                let UserData = responseCheckUser.data;\n\n                // Save the JWT to local storage\n                localStorage.setItem('auth-token', UserData.token);\n                localStorage.setItem('premission', UserData.employee.premission);\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const registerUser = async (RegisFormData) => {\n        try {\n            const response = await axios.post(`${baseURL}/create-account`, {\n                // Include other registration data as needed\n                ...RegisFormData\n            });\n\n            console.log('Registration successful:', response.data);\n            alert('Registration successful!');\n            // Handle successful registration\n\n            // Set isRegistering back to false after the registration process is completed\n            // setIsRegistering(false);\n\n\n        } catch (error) {\n            console.error('Registration failed:', error.response.data);\n            alert('Registration failed!');\n            // Handle registration failure\n        }\n    };\n\n    // Init Google client\n    useEffect(() => {\n        /* global google */\n        google.accounts.id.initialize({\n            client_id: \"1061523075573-n537pria7u9k24et8osc54cop29krk3c.apps.googleusercontent.com\",\n            callback: handleCallbackResponse\n        });\n        google.accounts.id.renderButton(\n            document.getElementById(\"signInDiv\"),\n            { theme: \"outline\", size: \"large\" }\n        )\n    }, []);\n\n\n    return (\n        <div className=\"App\">\n            <div id=\"signInDiv\"></div>\n        </div>\n    );\n}\n\nexport default GoogleLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}