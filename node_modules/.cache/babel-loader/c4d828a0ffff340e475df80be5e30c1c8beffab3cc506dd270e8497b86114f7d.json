{"ast":null,"code":"var _s = $RefreshSig$();\nconst MessageList = () => {\n  _s();\n  const [messageGroups, setMessageGroups] = useState([]);\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${baseURL}/get-messages`);\n      const messages = response.data.data;\n\n      // Group messages based on sender and receiver\n      const groupedMessages = [];\n      messages.forEach(message => {\n        const group = groupedMessages.find(group => group.sender === message.sender && group.receiver === message.receiver);\n        if (group) {\n          group.messages.push(message);\n        } else {\n          groupedMessages.push({\n            sender: message.sender,\n            receiver: message.receiver,\n            messages: [message]\n          });\n        }\n      });\n      setMessageGroups(groupedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  // Rest of the component code\n};\n_s(MessageList, \"1+CIXywoeyg5vfAiNLByeUGZuio=\");\n_c = MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["MessageList","_s","messageGroups","setMessageGroups","useState","fetchMessages","response","axios","get","baseURL","messages","data","groupedMessages","forEach","message","group","find","sender","receiver","push","error","console","useEffect","_c","$RefreshReg$"],"sources":["/Users/david/Documents/GitHub/web-api/client/src/component/MessageList.js"],"sourcesContent":["const MessageList = () => {\n    const [messageGroups, setMessageGroups] = useState([]);\n\n    const fetchMessages = async () => {\n        try {\n            const response = await axios.get(`${baseURL}/get-messages`);\n            const messages = response.data.data;\n\n            // Group messages based on sender and receiver\n            const groupedMessages = [];\n            messages.forEach((message) => {\n                const group = groupedMessages.find(\n                    (group) => group.sender === message.sender && group.receiver === message.receiver\n                );\n\n                if (group) {\n                    group.messages.push(message);\n                } else {\n                    groupedMessages.push({\n                        sender: message.sender,\n                        receiver: message.receiver,\n                        messages: [message]\n                    });\n                }\n            });\n\n            setMessageGroups(groupedMessages);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchMessages();\n    }, []);\n\n    // Rest of the component code\n};\n"],"mappings":";AAAA,MAAMA,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAE,GAAEC,OAAQ,eAAc,CAAC;MAC3D,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,IAAI,CAACA,IAAI;;MAEnC;MACA,MAAMC,eAAe,GAAG,EAAE;MAC1BF,QAAQ,CAACG,OAAO,CAAEC,OAAO,IAAK;QAC1B,MAAMC,KAAK,GAAGH,eAAe,CAACI,IAAI,CAC7BD,KAAK,IAAKA,KAAK,CAACE,MAAM,KAAKH,OAAO,CAACG,MAAM,IAAIF,KAAK,CAACG,QAAQ,KAAKJ,OAAO,CAACI,QAC7E,CAAC;QAED,IAAIH,KAAK,EAAE;UACPA,KAAK,CAACL,QAAQ,CAACS,IAAI,CAACL,OAAO,CAAC;QAChC,CAAC,MAAM;UACHF,eAAe,CAACO,IAAI,CAAC;YACjBF,MAAM,EAAEH,OAAO,CAACG,MAAM;YACtBC,QAAQ,EAAEJ,OAAO,CAACI,QAAQ;YAC1BR,QAAQ,EAAE,CAACI,OAAO;UACtB,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;MAEFX,gBAAgB,CAACS,eAAe,CAAC;IACrC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAEDE,SAAS,CAAC,MAAM;IACZjB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ,CAAC;AAACJ,EAAA,CArCID,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}