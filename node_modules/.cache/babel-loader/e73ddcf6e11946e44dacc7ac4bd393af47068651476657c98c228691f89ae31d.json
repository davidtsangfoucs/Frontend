{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/GitHub/web-api/client/src/component/GoogleLogin.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport axios from '../commons/axios';\nimport { baseURL } from '../commons/helper';\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\n// async function fetchUserProfile(idToken) {\n//     try {\n//         const response = await axios.get('https://people.googleapis.com/v1/people/me', {\n//             params: {\n//                 personFields: 'names',\n//             },\n//             headers: {\n//                 Authorization: `Bearer ${idToken}`,\n//             },\n//         });\n\n//         // Extract the desired information from the response\n//         const email = response.data.emailAddresses[0].value;\n//         const gender = response.data.genders[0].value;\n//         const name = response.data.names[0].displayName;\n\n//         return { email, gender, name };\n//     } catch (error) {\n//         console.error('Failed to fetch user profile:', error);\n//         throw error;\n//     }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GoogleLogin() {\n  _s();\n  const navigate = useNavigate();\n  async function handleCallbackResponse(response) {\n    console.log(\"Encoded JWT ID token\" + response.credential);\n    var userObject = jwt_decode(response.credential);\n    console.log(\"userObject\", userObject);\n    try {\n      let RegisFormData = {};\n      let responseCheckUser;\n      try {\n        responseCheckUser = await axios.get(`${baseURL}/get-employees-accounts/${response.clientId}`);\n      } catch (error) {\n        console.log('User not found', error.message);\n      }\n      if (!responseCheckUser || !responseCheckUser.data) {\n        // Create a new user\n        RegisFormData = {\n          fullName: userObject.name,\n          email: userObject.email,\n          password: 'No password number',\n          confirmPassword: 'No password number',\n          dateOfBirth: \"No date of birth\",\n          gender: \"No Gender\",\n          // If Google API provides it\n          phoneNumber: 'No phone number',\n          address: 'No address number',\n          state: \"verification\",\n          premission: \"Public User\",\n          department: \"No Department\",\n          employeeID: response.clientId,\n          hkID: 'No HKID number'\n        };\n\n        // Register the new user\n        let registrationResponse = await registerUser(RegisFormData);\n\n        // Save the JWT to local storage\n        localStorage.setItem('auth-token', registrationResponse.data.token);\n        localStorage.setItem('premission', \"Public User\");\n        navigate('/');\n      } else {\n        // The user already exists\n        let UserData = responseCheckUser.data;\n\n        // Save the JWT to local storage\n        localStorage.setItem('auth-token', UserData.token);\n        localStorage.setItem('premission', UserData.employee.premission);\n        navigate('/');\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  const registerUser = async RegisFormData => {\n    try {\n      const response = await axios.post(`${baseURL}/create-account`, {\n        // Include other registration data as needed\n        ...RegisFormData\n      });\n      console.log('Registration successful:', response.data);\n      alert('Registration successful!');\n      // Handle successful registration\n\n      // Set isRegistering back to false after the registration process is completed\n      // setIsRegistering(false);\n    } catch (error) {\n      console.error('Registration failed:', error.response.data);\n      alert('Registration failed!');\n      // Handle registration failure\n    }\n  };\n\n  // Init Google client\n  useEffect(() => {\n    /* global google */\n    google.accounts.id.initialize({\n      client_id: \"1061523075573-n537pria7u9k24et8osc54cop29krk3c.apps.googleusercontent.com\",\n      callback: handleCallbackResponse\n    });\n    google.accounts.id.renderButton(document.getElementById(\"signInDiv\"), {\n      theme: \"outline\",\n      size: \"large\"\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"signInDiv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_s(GoogleLogin, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = GoogleLogin;\nexport default GoogleLogin;\nvar _c;\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"names":["useEffect","axios","baseURL","jwt_decode","useNavigate","jsxDEV","_jsxDEV","GoogleLogin","_s","navigate","handleCallbackResponse","response","console","log","credential","userObject","RegisFormData","responseCheckUser","get","clientId","error","message","data","fullName","name","email","password","confirmPassword","dateOfBirth","gender","phoneNumber","address","state","premission","department","employeeID","hkID","registrationResponse","registerUser","localStorage","setItem","token","UserData","employee","err","post","alert","google","accounts","id","initialize","client_id","callback","renderButton","document","getElementById","theme","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/david/Documents/GitHub/web-api/client/src/component/GoogleLogin.js"],"sourcesContent":["import { useEffect } from 'react';\nimport axios from '../commons/axios';\nimport { baseURL } from '../commons/helper';\nimport jwt_decode from \"jwt-decode\"\nimport { useNavigate } from 'react-router-dom';\n// async function fetchUserProfile(idToken) {\n//     try {\n//         const response = await axios.get('https://people.googleapis.com/v1/people/me', {\n//             params: {\n//                 personFields: 'names',\n//             },\n//             headers: {\n//                 Authorization: `Bearer ${idToken}`,\n//             },\n//         });\n\n//         // Extract the desired information from the response\n//         const email = response.data.emailAddresses[0].value;\n//         const gender = response.data.genders[0].value;\n//         const name = response.data.names[0].displayName;\n\n//         return { email, gender, name };\n//     } catch (error) {\n//         console.error('Failed to fetch user profile:', error);\n//         throw error;\n//     }\n// }\n\nfunction GoogleLogin() {\n    const navigate = useNavigate();\n\n    async function handleCallbackResponse(response) {\n        console.log(\"Encoded JWT ID token\" + response.credential);\n        var userObject = jwt_decode(response.credential);\n        console.log(\"userObject\", userObject);\n        try {\n\n            let RegisFormData = {};\n            let responseCheckUser;\n\n            try {\n                responseCheckUser = await axios.get(`${baseURL}/get-employees-accounts/${response.clientId}`);\n            } catch (error) {\n                console.log('User not found', error.message);\n            }\n\n\n            if (!responseCheckUser || !responseCheckUser.data) {\n                // Create a new user\n                RegisFormData = {\n                    fullName: userObject.name,\n                    email: userObject.email,\n                    password: 'No password number',\n                    confirmPassword: 'No password number',\n                    dateOfBirth: \"No date of birth\",\n                    gender: \"No Gender\", // If Google API provides it\n                    phoneNumber: 'No phone number',\n                    address: 'No address number',\n                    state: \"verification\",\n                    premission: \"Public User\",\n                    department: \"No Department\",\n                    employeeID: response.clientId,\n                    hkID: 'No HKID number',\n                };\n\n                // Register the new user\n                let registrationResponse = await registerUser(RegisFormData);\n\n                // Save the JWT to local storage\n                localStorage.setItem('auth-token', registrationResponse.data.token);\n                localStorage.setItem('premission', \"Public User\");\n                navigate('/')\n            } else {\n                // The user already exists\n                let UserData = responseCheckUser.data;\n\n                // Save the JWT to local storage\n                localStorage.setItem('auth-token', UserData.token);\n                localStorage.setItem('premission', UserData.employee.premission);\n                navigate('/')\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const registerUser = async (RegisFormData) => {\n        try {\n            const response = await axios.post(`${baseURL}/create-account`, {\n                // Include other registration data as needed\n                ...RegisFormData\n            });\n\n            console.log('Registration successful:', response.data);\n            alert('Registration successful!');\n            // Handle successful registration\n\n            // Set isRegistering back to false after the registration process is completed\n            // setIsRegistering(false);\n\n\n        } catch (error) {\n            console.error('Registration failed:', error.response.data);\n            alert('Registration failed!');\n            // Handle registration failure\n        }\n    };\n\n    // Init Google client\n    useEffect(() => {\n        /* global google */\n        google.accounts.id.initialize({\n            client_id: \"1061523075573-n537pria7u9k24et8osc54cop29krk3c.apps.googleusercontent.com\",\n            callback: handleCallbackResponse\n        });\n        google.accounts.id.renderButton(\n            document.getElementById(\"signInDiv\"),\n            { theme: \"outline\", size: \"large\" }\n        )\n    }, []);\n\n\n    return (\n        <div className=\"App\">\n            <div id=\"signInDiv\"></div>\n        </div>\n    );\n}\n\nexport default GoogleLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}