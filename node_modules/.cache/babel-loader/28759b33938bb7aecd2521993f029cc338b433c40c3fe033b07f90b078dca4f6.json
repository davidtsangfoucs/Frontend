{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/GitHub/web-api/client/src/component/MessageList.js\",\n  _s = $RefreshSig$();\nimport axios from '../commons/axios';\nimport React, { useState, useEffect } from 'react';\nimport { baseURL } from '../commons/helper';\nimport UseAuth from '../component/UseAuth';\nimport MsgPanel from '../component/MsgPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageList = () => {\n  _s();\n  const [messageGroups, setMessageGroups] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const [showPanel, setShowPanel] = useState(false);\n  const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n  const [selectedMessageId, setSelectedMessageId] = useState(null); // New state variable\n\n  const {\n    isLoggedIn,\n    premission,\n    userId,\n    objId,\n    location,\n    userName,\n    userEmail\n  } = UseAuth();\n  useEffect(() => {\n    if (location) {\n      fetchMessages();\n    }\n  }, [location]);\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${baseURL}/get-messages`);\n      const messages = response.data.data;\n      let filteredMessages;\n      if (premission === \"Charity Worker\") {\n        filteredMessages = messages.filter(message => message.receiver === location || message.sender === location);\n      } else {\n        filteredMessages = messages.filter(message => message.receiver === userEmail);\n      }\n      const groupedMessages = [];\n      filteredMessages.forEach(message => {\n        const groupIndex = groupedMessages.findIndex(group => group.sender === message.sender && group.receiver === message.receiver || group.sender === message.receiver && group.receiver === message.sender);\n        if (groupIndex > -1) {\n          // Append content and time to existing group\n          groupedMessages[groupIndex].content.push(message.sender + \": \" + message.content); // Include sender name in content\n          groupedMessages[groupIndex].createdAt.push(message.createdAt);\n          groupedMessages[groupIndex].updatedAt.push(message.updatedAt);\n          groupedMessages[groupIndex]._id.push(message._id);\n        } else {\n          // Create new group\n          groupedMessages.push({\n            sender: message.sender,\n            receiver: message.receiver,\n            content: [message.sender + \": \" + message.content],\n            // Include sender name in content\n            createdAt: [message.createdAt],\n            updatedAt: [message.updatedAt],\n            _id: [message._id]\n          });\n        }\n      });\n\n      // Sort messages within each group by time in ascending order\n      groupedMessages.forEach(group => {\n        const messages = group.content.map((content, index) => ({\n          content,\n          createdAt: group.createdAt[index],\n          updatedAt: group.updatedAt[index],\n          _id: group._id[index]\n        }));\n        messages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n        group.content = messages.map(message => message.content);\n        group.createdAt = messages.map(message => message.createdAt);\n        group.updatedAt = messages.map(message => message.updatedAt);\n        group._id = messages.map(message => message._id);\n      });\n      setMessageGroups(groupedMessages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleDelete = id => {\n    setDeleteConfirmationOpen(true);\n    setSelectedMessageId(id); // Set the selected message ID\n  };\n\n  const handleDeleteOneData = id => {\n    setDeleteConfirmationOpen(true);\n    setSelectedMessageId(id); // Set the selected message ID\n  };\n\n  const confirmDeleteAction = async id => {\n    try {\n      await axios.delete(`/delete-messages/${id}`);\n      fetchMessages();\n    } catch (error) {\n      console.error('Error deleting message:', error);\n    } finally {\n      setDeleteConfirmationOpen(false);\n      setSelectedMessageId(null); // Reset the selected message ID\n    }\n  };\n\n  const handleReply = message => {\n    setSelectedMessage(message);\n    setShowPanel(!showPanel);\n  };\n  const handleCloseReply = () => {\n    setSelectedMessage(null);\n  };\n  const cancelDeleteAction = () => {\n    setDeleteConfirmationOpen(false);\n    setSelectedMessageId(null); // Reset the selected message ID\n  };\n\n  const formatDateTime = dateTimeString => {\n    const options = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true,\n      timeZone: 'Asia/Hong_Kong'\n    };\n    const dateTime = new Date(dateTimeString);\n    return dateTime.toLocaleString('en-US', options);\n  };\n  const closeMessagePanel = () => {\n    setShowPanel(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table is-bordered is-fullwidth\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Receiver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete Msg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: messageGroups.map(group => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: group.sender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: premission === \"Public User\" ? userEmail : group.receiver\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: group.content.map((content, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: group.createdAt.map((createdAt, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: formatDateTime(createdAt)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: group.content.map((content, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button small-delete is-danger\",\n                onClick: () => handleDeleteOneData(group._id[index]),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button is-primary\",\n              onClick: () => handleReply(group),\n              children: \"Reply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this), premission === \"Charity Worker\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button is-danger\",\n              onClick: () => handleDelete(group._id[0]),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 37\n            }, this), isDeleteConfirmationOpen && selectedMessageId === group._id[0] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal is-active\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-background\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"delete-box modal-content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"box has-text-centered\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    className: \"confirm-delete-msg\",\n                    children: \"Confirm Deletion\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Are you sure you want to delete this Msg?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"buttons\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button is-danger\",\n                      onClick: () => confirmDeleteAction(group._id[0]),\n                      children: \"Yes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 205,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button\",\n                      onClick: cancelDeleteAction,\n                      children: \"No\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modal-close is-large\",\n                \"aria-label\": \"close\",\n                onClick: cancelDeleteAction\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this)]\n        }, `${group.sender}-${group.receiver}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), showPanel && /*#__PURE__*/_jsxDEV(MsgPanel, {\n      closePanel: closeMessagePanel,\n      replyReceiver: selectedMessage.sender,\n      replySender: selectedMessage.receiver,\n      publicUserName: premission === \"Public User\" ? userName : selectedMessage.receiver,\n      onClose: handleCloseReply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageList, \"Zhlcgs/ylyMik9N4wZQTOhSYnkQ=\");\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["axios","React","useState","useEffect","baseURL","UseAuth","MsgPanel","jsxDEV","_jsxDEV","MessageList","_s","messageGroups","setMessageGroups","selectedMessage","setSelectedMessage","showPanel","setShowPanel","isDeleteConfirmationOpen","setDeleteConfirmationOpen","selectedMessageId","setSelectedMessageId","isLoggedIn","premission","userId","objId","location","userName","userEmail","fetchMessages","response","get","messages","data","filteredMessages","filter","message","receiver","sender","groupedMessages","forEach","groupIndex","findIndex","group","content","push","createdAt","updatedAt","_id","map","index","sort","a","b","Date","error","console","handleDelete","id","handleDeleteOneData","confirmDeleteAction","delete","handleReply","handleCloseReply","cancelDeleteAction","formatDateTime","dateTimeString","options","year","month","day","hour","minute","hour12","timeZone","dateTime","toLocaleString","closeMessagePanel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","closePanel","replyReceiver","replySender","publicUserName","onClose","_c","$RefreshReg$"],"sources":["/Users/david/Documents/GitHub/web-api/client/src/component/MessageList.js"],"sourcesContent":["import axios from '../commons/axios';\nimport React, { useState, useEffect } from 'react';\nimport { baseURL } from '../commons/helper';\nimport UseAuth from '../component/UseAuth';\nimport MsgPanel from '../component/MsgPanel';\n\nconst MessageList = () => {\n    const [messageGroups, setMessageGroups] = useState([]);\n    const [selectedMessage, setSelectedMessage] = useState(null);\n    const [showPanel, setShowPanel] = useState(false);\n    const [isDeleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false);\n    const [selectedMessageId, setSelectedMessageId] = useState(null); // New state variable\n\n    const { isLoggedIn, premission, userId, objId, location, userName, userEmail } = UseAuth();\n\n    useEffect(() => {\n        if (location) {\n            fetchMessages();\n        }\n    }, [location]);\n\n    const fetchMessages = async () => {\n        try {\n            const response = await axios.get(`${baseURL}/get-messages`);\n            const messages = response.data.data;\n\n            let filteredMessages;\n            if (premission === \"Charity Worker\") {\n                filteredMessages = messages.filter(\n                    (message) => message.receiver === location || message.sender === location\n                );\n            } else {\n                filteredMessages = messages.filter(\n                    (message) => message.receiver === userEmail\n                );\n            }\n\n            const groupedMessages = [];\n            filteredMessages.forEach((message) => {\n                const groupIndex = groupedMessages.findIndex((group) =>\n                    (group.sender === message.sender && group.receiver === message.receiver) ||\n                    (group.sender === message.receiver && group.receiver === message.sender)\n                );\n\n                if (groupIndex > -1) {\n                    // Append content and time to existing group\n                    groupedMessages[groupIndex].content.push(message.sender + \": \" + message.content); // Include sender name in content\n                    groupedMessages[groupIndex].createdAt.push(message.createdAt);\n                    groupedMessages[groupIndex].updatedAt.push(message.updatedAt);\n                    groupedMessages[groupIndex]._id.push(message._id);\n                } else {\n                    // Create new group\n                    groupedMessages.push({\n                        sender: message.sender,\n                        receiver: message.receiver,\n                        content: [message.sender + \": \" + message.content], // Include sender name in content\n                        createdAt: [message.createdAt],\n                        updatedAt: [message.updatedAt],\n                        _id: [message._id]\n                    });\n                }\n            });\n\n            // Sort messages within each group by time in ascending order\n            groupedMessages.forEach((group) => {\n                const messages = group.content.map((content, index) => ({\n                    content,\n                    createdAt: group.createdAt[index],\n                    updatedAt: group.updatedAt[index],\n                    _id: group._id[index]\n                }));\n\n                messages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n\n                group.content = messages.map((message) => message.content);\n                group.createdAt = messages.map((message) => message.createdAt);\n                group.updatedAt = messages.map((message) => message.updatedAt);\n                group._id = messages.map((message) => message._id);\n            });\n\n            setMessageGroups(groupedMessages);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n        }\n    };\n\n    const handleDelete = (id) => {\n        setDeleteConfirmationOpen(true);\n        setSelectedMessageId(id); // Set the selected message ID\n    };\n\n    const handleDeleteOneData = (id) => {\n        setDeleteConfirmationOpen(true);\n        setSelectedMessageId(id); // Set the selected message ID\n    };\n\n    const confirmDeleteAction = async (id) => {\n        try {\n            await axios.delete(`/delete-messages/${id}`);\n            fetchMessages();\n        } catch (error) {\n            console.error('Error deleting message:', error);\n        } finally {\n            setDeleteConfirmationOpen(false);\n            setSelectedMessageId(null); // Reset the selected message ID\n        }\n    };\n\n    const handleReply = (message) => {\n        setSelectedMessage(message);\n        setShowPanel(!showPanel);\n    };\n\n    const handleCloseReply = () => {\n        setSelectedMessage(null);\n    };\n\n    const cancelDeleteAction = () => {\n        setDeleteConfirmationOpen(false);\n        setSelectedMessageId(null); // Reset the selected message ID\n    };\n\n    const formatDateTime = (dateTimeString) => {\n        const options = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true,\n            timeZone: 'Asia/Hong_Kong'\n        };\n\n        const dateTime = new Date(dateTimeString);\n        return dateTime.toLocaleString('en-US', options);\n    };\n\n    const closeMessagePanel = () => {\n        setShowPanel(false);\n    };\n\n    return (\n        <div className=\"container\">\n            <table className=\"table is-bordered is-fullwidth\">\n                <thead>\n                    <tr>\n                        <th>Sender</th>\n                        <th>Receiver</th>\n                        <th>Content</th>\n                        <th>Time</th>\n                        <th>Delete Msg</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {messageGroups.map((group) => (\n                        <tr key={`${group.sender}-${group.receiver}`}>\n                            <td>{group.sender}</td>\n                            <td>{premission === \"Public User\" ? userEmail : group.receiver}</td>\n                            <td>\n                                {group.content.map((content, index) => (\n                                    <div key={index}>{content}</div>\n                                ))}\n                            </td>\n                            <td>\n                                {group.createdAt.map((createdAt, index) => (\n                                    <div key={index}>{formatDateTime(createdAt)}</div>\n                                ))}\n                            </td>\n                            <td>\n                                {group.content.map((content, index) => (\n                                    <div key={index}>\n                                        <button\n                                            className=\"button small-delete is-danger\"\n                                            onClick={() => handleDeleteOneData(group._id[index])}\n                                        >\n                                            Delete\n                                        </button>\n                                    </div>\n                                ))}\n                            </td>\n                            <td>\n                                <button\n                                    className=\"button is-primary\"\n                                    onClick={() => handleReply(group)}\n                                >\n                                    Reply\n                                </button>\n                                {premission === \"Charity Worker\" && (\n                                    <button\n                                        className=\"button is-danger\"\n                                        onClick={() => handleDelete(group._id[0])}\n                                    >\n                                        Delete\n                                    </button>\n                                )}\n                                {isDeleteConfirmationOpen && selectedMessageId === group._id[0] && (\n                                    <div className=\"modal is-active\">\n                                        <div className=\"modal-background\"></div>\n                                        <div className=\"delete-box modal-content\">\n                                            <div className=\"box has-text-centered\">\n                                                <h2 className=\"confirm-delete-msg\">Confirm Deletion</h2>\n                                                <p>Are you sure you want to delete this Msg?</p>\n                                                <div className=\"buttons\">\n                                                    <button\n                                                        className=\"button is-danger\"\n                                                        onClick={() => confirmDeleteAction(group._id[0])}\n                                                    >\n                                                        Yes\n                                                    </button>\n                                                    <button className=\"button\" onClick={cancelDeleteAction}>\n                                                        No\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <button\n                                            className=\"modal-close is-large\"\n                                            aria-label=\"close\"\n                                            onClick={cancelDeleteAction}\n                                        ></button>\n                                    </div>\n                                )}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n            {showPanel && (\n                <MsgPanel\n                    closePanel={closeMessagePanel}\n                    replyReceiver={selectedMessage.sender}\n                    replySender={selectedMessage.receiver}\n                    publicUserName={premission === \"Public User\" ? userName : selectedMessage.receiver}\n                    onClose={handleCloseReply}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default MessageList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}